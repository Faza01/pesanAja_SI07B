/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import databases.OrderDB;
import java.awt.*;
import javax.swing.*;
import java.awt.geom.RoundRectangle2D;
import javax.swing.border.Border;
import model.Produk;
import model.Makanan;
import model.Minuman;
import java.util.List;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import databases.ProdukDB;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.*;
import java.util.ArrayList;
import model.Order;
import model.ValidasiInputException;
import java.util.Date;
import model.User;

/**
 *
 * @author Faza Bilwildi Emyu_2311103083_SI-07-B
 */
public class DashboardForm extends javax.swing.JFrame {

    private CardLayout cardLayout;
    private User currentUser;

    public DashboardForm(User user) {
        initComponents();
        this.currentUser = user;

        setLocationRelativeTo(null);
        refreshFoodCards();
        loadOrders(currentUser.getUsername(), currentUser.getRole());
        cardLayout = (CardLayout) mainPanel.getLayout();

        txtSearch.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Search here");

        Icon homeIcon_Focus = new FlatSVGIcon("assets/home-focus.svg", 24, 24);
        Icon historyIcon_Focus = new FlatSVGIcon("assets/history-focus.svg", 24, 24);
        Icon logOutIcon_Focus = new FlatSVGIcon("assets/log-focus.svg", 20, 20);

        Icon homeIcon = new FlatSVGIcon("assets/home-nonFocus.svg", 24, 24);
        Icon historyIcon = new FlatSVGIcon("assets/history-nonFocus.svg", 24, 24);
        Icon logOutIcon = new FlatSVGIcon("assets/log-nonFocus.svg", 20, 20);

        addHoverEffect(btnHome, new Color(253, 82, 8), homeIcon, homeIcon_Focus);
        addHoverEffect(btnOrder, new Color(253, 82, 8), historyIcon, historyIcon_Focus);
//        addHoverEffect(btnHistory, new Color(253, 82, 8), historyIcon, historyIcon_Focus);
        addHoverEffect(btnLogOut, new Color(253, 82, 8), logOutIcon, logOutIcon_Focus);
    }

    public DashboardForm() {
        this(null); // Panggil konstruktor lain dengan User = null
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        foodCards = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        txtNama = new javax.swing.JLabel();
        txtHarga = new javax.swing.JLabel();
        txtDeskripsi = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txtKetersediaan = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnAddProduk = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        sidePanel = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnOrder = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        foodPanel = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        scrollFood = new javax.swing.JScrollPane();
        foodContent = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        orderPanel = new javax.swing.JPanel();
        btnCheckOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblDiskon = new javax.swing.JLabel();
        lblSubTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblOrder = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        btnHapus = new javax.swing.JButton();
        MyOrderPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMyOrder = new javax.swing.JTable();
        btnDetail1 = new javax.swing.JButton();
        btnRefreshOrder = new javax.swing.JButton();
        jFilterStatus = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        historyPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        btnDetail = new javax.swing.JButton();

        foodCards.setBackground(new java.awt.Color(255, 255, 255));
        foodCards.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        foodCards.setPreferredSize(new java.awt.Dimension(280, 170));
        foodCards.setLayout(new java.awt.BorderLayout(10, 0));

        jLabel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jLabel6.setPreferredSize(new java.awt.Dimension(100, 100));
        foodCards.add(jLabel6, java.awt.BorderLayout.WEST);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        txtNama.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtNama.setForeground(new java.awt.Color(51, 51, 51));
        txtNama.setText("Nama Produk");
        txtNama.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel4.add(txtNama);

        txtHarga.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtHarga.setForeground(new java.awt.Color(51, 51, 51));
        txtHarga.setText("Harga");
        txtHarga.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel4.add(txtHarga);

        txtDeskripsi.setForeground(new java.awt.Color(51, 51, 51));
        txtDeskripsi.setText("Deskripsi");
        txtDeskripsi.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel4.add(txtDeskripsi);

        foodCards.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel5.setLayout(new java.awt.BorderLayout());

        txtKetersediaan.setText("ketersediaan");
        jPanel5.add(txtKetersediaan, java.awt.BorderLayout.LINE_START);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.X_AXIS));

        btnAddProduk.setBackground(new java.awt.Color(253, 82, 8));
        btnAddProduk.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddProduk.setForeground(new java.awt.Color(255, 255, 255));
        btnAddProduk.setText("Add");
        btnAddProduk.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(btnAddProduk);

        jSpinner1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jSpinner1.setPreferredSize(new java.awt.Dimension(45, 22));
        jPanel3.add(jSpinner1);

        jPanel5.add(jPanel3, java.awt.BorderLayout.EAST);

        foodCards.add(jPanel5, java.awt.BorderLayout.SOUTH);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        sidePanel.setBackground(new java.awt.Color(255, 255, 255));
        sidePanel.setPreferredSize(new java.awt.Dimension(200, 510));

        btnHome.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnHome.setForeground(new java.awt.Color(51, 51, 51));
        btnHome.setText("Home");
        btnHome.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnOrder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnOrder.setForeground(new java.awt.Color(51, 51, 51));
        btnOrder.setText("Order");
        btnOrder.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        btnLogOut.setBackground(new java.awt.Color(255, 255, 255));
        btnLogOut.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogOut.setForeground(new java.awt.Color(51, 51, 51));
        btnLogOut.setText("Log Out");
        btnLogOut.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(btnHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 393, Short.MAX_VALUE)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        getContentPane().add(sidePanel, java.awt.BorderLayout.WEST);

        mainPanel.setBackground(new java.awt.Color(254, 254, 254));
        mainPanel.setPreferredSize(new java.awt.Dimension(900, 600));
        mainPanel.setLayout(new java.awt.CardLayout());

        homePanel.setBackground(new java.awt.Color(254, 254, 254));
        homePanel.setPreferredSize(new java.awt.Dimension(900, 600));
        homePanel.setLayout(new java.awt.BorderLayout());

        foodPanel.setBackground(new java.awt.Color(243, 243, 243));
        foodPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        txtSearch.setBackground(new java.awt.Color(255, 255, 255));
        txtSearch.setForeground(new java.awt.Color(51, 51, 51));

        scrollFood.setBackground(new java.awt.Color(255, 255, 255));
        scrollFood.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        scrollFood.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        foodContent.setBackground(new java.awt.Color(243, 243, 243));
        foodContent.setForeground(new java.awt.Color(255, 255, 255));
        foodContent.setPreferredSize(new java.awt.Dimension(620, 2000));
        foodContent.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));
        scrollFood.setViewportView(foodContent);

        btnRefresh.setText("refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout foodPanelLayout = new javax.swing.GroupLayout(foodPanel);
        foodPanel.setLayout(foodPanelLayout);
        foodPanelLayout.setHorizontalGroup(
            foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodPanelLayout.createSequentialGroup()
                .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollFood, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, foodPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(243, 243, 243)
                        .addComponent(btnRefresh)))
                .addContainerGap())
        );
        foodPanelLayout.setVerticalGroup(
            foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, foodPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(foodPanelLayout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(foodPanelLayout.createSequentialGroup()
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(scrollFood, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        homePanel.add(foodPanel, java.awt.BorderLayout.WEST);

        orderPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderPanel.setPreferredSize(new java.awt.Dimension(300, 600));

        btnCheckOut.setBackground(new java.awt.Color(253, 82, 8));
        btnCheckOut.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCheckOut.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckOut.setText("Check Out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Total");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Sub Total");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Diskon");

        lblTotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(51, 51, 51));
        lblTotal.setText("0");

        lblDiskon.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDiskon.setForeground(new java.awt.Color(51, 51, 51));
        lblDiskon.setText("0");

        lblSubTotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSubTotal.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTotal.setText("0");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 300));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 300));

        TblOrder.setBackground(new java.awt.Color(255, 255, 255));
        TblOrder.setForeground(new java.awt.Color(51, 51, 51));
        TblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Qty", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TblOrder);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("My Order");

        btnHapus.setText("delete");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orderPanelLayout = new javax.swing.GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel9)
                .addGap(182, 182, 182))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblSubTotal))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblDiskon))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTotal))
                            .addComponent(btnCheckOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnHapus)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))))
        );
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel9)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHapus)
                .addGap(19, 19, 19)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblSubTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblDiskon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotal))
                .addGap(18, 18, 18)
                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        homePanel.add(orderPanel, java.awt.BorderLayout.CENTER);

        mainPanel.add(homePanel, "Home");

        MyOrderPanel.setBackground(new java.awt.Color(243, 243, 243));
        MyOrderPanel.setPreferredSize(new java.awt.Dimension(900, 600));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("My Order");

        tblMyOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Transaksi", "Total Harga", "Potongan Harga", "Waktu Pembelian", "Status Pesanan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblMyOrder);

        btnDetail1.setBackground(new java.awt.Color(253, 82, 8));
        btnDetail1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDetail1.setForeground(new java.awt.Color(255, 255, 255));
        btnDetail1.setText("Lihat Detail");
        btnDetail1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetail1ActionPerformed(evt);
            }
        });

        btnRefreshOrder.setText("refresh");
        btnRefreshOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshOrderActionPerformed(evt);
            }
        });

        jFilterStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "proses", "selesai", "batal" }));
        jFilterStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jFilterStatusItemStateChanged(evt);
            }
        });
        jFilterStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFilterStatusActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Status Pesanan : ");

        javax.swing.GroupLayout MyOrderPanelLayout = new javax.swing.GroupLayout(MyOrderPanel);
        MyOrderPanel.setLayout(MyOrderPanelLayout);
        MyOrderPanelLayout.setHorizontalGroup(
            MyOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MyOrderPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(MyOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(MyOrderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFilterStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefreshOrder))
                    .addGroup(MyOrderPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnDetail1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        MyOrderPanelLayout.setVerticalGroup(
            MyOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MyOrderPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(MyOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(btnRefreshOrder)
                    .addGroup(MyOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jFilterStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDetail1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        mainPanel.add(MyOrderPanel, "Order");

        historyPanel.setBackground(new java.awt.Color(243, 243, 243));
        historyPanel.setPreferredSize(new java.awt.Dimension(900, 600));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("My History Order");

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Daftar Pesanan", "Total Harga", "Jumlah Bayar", "Kembalian", "Waktu Pesanan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHistory);
        if (tblHistory.getColumnModel().getColumnCount() > 0) {
            tblHistory.getColumnModel().getColumn(0).setHeaderValue("Daftar Pesanan");
            tblHistory.getColumnModel().getColumn(2).setHeaderValue("Jumlah Bayar");
            tblHistory.getColumnModel().getColumn(3).setHeaderValue("Kembalian");
        }

        btnDetail.setBackground(new java.awt.Color(253, 82, 8));
        btnDetail.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDetail.setForeground(new java.awt.Color(255, 255, 255));
        btnDetail.setText("Lihat Detail");
        btnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        mainPanel.add(historyPanel, "History");

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);
        mainPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        cardLayout.show(mainPanel, "Home");
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        cardLayout.show(mainPanel, "Order");
    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        LoginForm login = new LoginForm();
        login.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // Mendapatkan data dari tabel
        DefaultTableModel dtm = (DefaultTableModel) TblOrder.getModel();
        int rowCount = dtm.getRowCount();
        double totalHarga = 0;

        // Memastikan ada data di tabel
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "Tidak ada item dalam pesanan!");
            return;
        }

        // Menghitung total harga dari tabel
        for (int i = 0; i < rowCount; i++) {
            double totHarga = Double.parseDouble(dtm.getValueAt(i, 2).toString());
            totalHarga += totHarga;
        }

        // Mengurangi potongan harga jika ada
        double potongan = Double.parseDouble(lblDiskon.getText());
        totalHarga -= potongan;

        // Meminta input pembayaran dari pengguna
        String inputPembayaran = JOptionPane.showInputDialog(
                this,
                "Total yang harus dibayar: Rp " + totalHarga + "\nMasukkan jumlah pembayaran:",
                "Pembayaran",
                JOptionPane.QUESTION_MESSAGE
        );

        // Validasi input pembayaran
        if (inputPembayaran == null || inputPembayaran.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pembayaran dibatalkan!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double pembayaran = Double.parseDouble(inputPembayaran);

            if (pembayaran < totalHarga) {
                JOptionPane.showMessageDialog(this, "Pembayaran tidak mencukupi!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double kembalian = pembayaran - totalHarga;

            // Membuat Order baru
            String idTransaksi = "TRX" + System.currentTimeMillis(); // Menggunakan waktu saat ini sebagai ID transaksi
            Order newOrder = new Order(idTransaksi, currentUser.getUsername());

            // Menambahkan produk dari TblOrder ke dalam Order baru
            for (int i = 0; i < rowCount; i++) {
                String namaProduk = dtm.getValueAt(i, 0).toString();
                int qty = Integer.parseInt(dtm.getValueAt(i, 1).toString());
                double totHarga = Double.parseDouble(dtm.getValueAt(i, 2).toString());

                newOrder.getListNamaProduk().add(namaProduk);
                newOrder.getListQty().add(qty);
                newOrder.getListTotHarga().add(totHarga);
            }

            newOrder.setTotalHarga(totalHarga);
            newOrder.setPotonganHarga(potongan);
            newOrder.setWaktuPembelian(new Date());
            newOrder.setStatusPesanan("Proses"); // Status pesanan default "Proses"

            // Menyimpan order ke database
            OrderDB.saveOrder(newOrder);

            // Menampilkan pesan bahwa pesanan berhasil dibuat
            JOptionPane.showMessageDialog(
                    this,
                    "Pesanan berhasil dibuat!\nTotal harga: Rp " + totalHarga + "\nKembalian: Rp " + kembalian,
                    "Sukses",
                    JOptionPane.INFORMATION_MESSAGE
            );

            // Reset tabel setelah checkout
            dtm.setRowCount(0); // Menghapus semua baris di tabel
            lblSubTotal.setText("0");
            lblDiskon.setText("0");
            lblTotal.setText("0");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah pembayaran harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        DefaultTableModel dt = (DefaultTableModel) TblOrder.getModel();
        int rw = TblOrder.getSelectedRow();
        dt.removeRow(rw);

        hitungHarga();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshFoodCards();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDetailActionPerformed

    private void btnDetail1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetail1ActionPerformed
        int selectedRow = tblMyOrder.getSelectedRow(); // Mendapatkan baris yang dipilih

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih pesanan terlebih dahulu!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Mendapatkan nilai idTransaksi dari kolom pertama
        String idTransaksi = tblMyOrder.getValueAt(selectedRow, 0).toString();

        try {
            OrderDB orderDB = new OrderDB();
            Order orderDetail = orderDB.getDetailOrder(idTransaksi);

            if (orderDetail != null) {
                // Tampilkan detail order (contoh: di JOptionPane atau panel)
                String detailPesanan = "ID Transaksi: " + orderDetail.getIdTransaksi() + "\n"
                        + "User: " + orderDetail.getUser() + "\n"
                        + "Total Harga: " + orderDetail.getTotalHarga() + "\n"
                        + "Potongan Harga: " + orderDetail.getPotonganHarga() + "\n"
                        + "Waktu Pembelian: " + orderDetail.getWaktuPembelian() + "\n"
                        + "Status Pesanan: " + orderDetail.getStatusPesanan() + "\n"
                        + "Daftar Produk:\n";

                List<String> namaProdukList = orderDetail.getListNamaProduk();
                List<Integer> qtyList = orderDetail.getListQty();
                List<Double> totHargaList = orderDetail.getListTotHarga();

                for (int i = 0; i < namaProdukList.size(); i++) {
                    detailPesanan += "- " + namaProdukList.get(i) + " x" + qtyList.get(i) + " = " + totHargaList.get(i) + "\n";
                }

                // Menampilkan detail pesanan
                JOptionPane.showMessageDialog(this, detailPesanan, "Detail Pesanan", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Detail pesanan tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDetail1ActionPerformed

    private void btnRefreshOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshOrderActionPerformed
        loadOrders(currentUser.getUsername(), currentUser.getRole());
    }//GEN-LAST:event_btnRefreshOrderActionPerformed

    private void jFilterStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jFilterStatusItemStateChanged
        loadOrders(currentUser.getUsername(), currentUser.getRole());
    }//GEN-LAST:event_jFilterStatusItemStateChanged

    private void jFilterStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFilterStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFilterStatusActionPerformed

    private void createFoodCard(Produk produk) {
        // Duplikasi panel foodCards (menggunakan template yang sudah ada)
        RoundedPanel foodCard = new RoundedPanel(30, new Color(255, 255, 255));  // Border radius 30px
        foodCard.setLayout(new java.awt.BorderLayout(10, 0));
        foodCard.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        foodCard.setPreferredSize(new java.awt.Dimension(280, 170));

        // Bagian gambar produk
        JLabel gambarLabel = new JLabel();
        // gambarLabel.setIcon(new ImageIcon(produk.getGambar())); // Gambar produk (uncomment jika ada implementasi)
        gambarLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        gambarLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        tampilGambar(produk.getGambar(), gambarLabel, 100, 100);
        foodCard.add(gambarLabel, java.awt.BorderLayout.WEST);

        // Panel untuk teks (nama, harga, deskripsi)
        JPanel panelText = new JPanel();
        panelText.setLayout(new javax.swing.BoxLayout(panelText, javax.swing.BoxLayout.Y_AXIS));
        panelText.setBackground(new java.awt.Color(255, 255, 255));

        // Nama produk
        JLabel txtNama = new JLabel();
        if (produk instanceof Makanan) {
            Makanan makanan = (Makanan) produk;
            txtNama.setText(makanan.getNamaMakanan());
        } else if (produk instanceof Minuman) {
            Minuman minuman = (Minuman) produk;
            txtNama.setText(minuman.getNamaMinuman());
        }
        txtNama.setFont(new java.awt.Font("Segoe UI", 1, 12)); // Font yang diinginkan
        txtNama.setForeground(new java.awt.Color(51, 51, 51));
        txtNama.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        panelText.add(txtNama);

        // Harga produk
        JLabel txtHarga = new JLabel("Rp " + produk.getHarga());
        txtHarga.setFont(new java.awt.Font("Segoe UI", 1, 12));
        txtHarga.setForeground(new java.awt.Color(51, 51, 51));
        txtHarga.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        panelText.add(txtHarga);

        // Deskripsi produk
        JLabel txtDeskripsi = new JLabel(produk.getDeskripsi());
        txtDeskripsi.setForeground(new java.awt.Color(51, 51, 51));
        txtDeskripsi.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        panelText.add(txtDeskripsi);

        // Tambahkan panel teks ke panel utama
        foodCard.add(panelText, java.awt.BorderLayout.CENTER);

        // Panel untuk ketersediaan dan tombol
        JPanel panelKetersediaan = new JPanel();
        panelKetersediaan.setBackground(new java.awt.Color(255, 255, 255));
        panelKetersediaan.setPreferredSize(new java.awt.Dimension(115, 23));
        panelKetersediaan.setLayout(new java.awt.BorderLayout());

        // Ketersediaan produk
        JLabel txtKetersediaan = new JLabel(produk.isTersedia() ? "Tersedia" : "Tidak Tersedia");
        panelKetersediaan.add(txtKetersediaan, java.awt.BorderLayout.LINE_START);

        // Tombol "Add" (opsional)
        JPanel ButtonPanel = new JPanel();
        ButtonPanel.setBackground(new java.awt.Color(255, 255, 255));
        ButtonPanel.setLayout(new javax.swing.BoxLayout(ButtonPanel, javax.swing.BoxLayout.X_AXIS));

        JButton btnAddProduk = new JButton("Add");
        btnAddProduk.setBackground(new java.awt.Color(253, 82, 8));
        btnAddProduk.setFont(new java.awt.Font("Segoe UI", 1, 12));
        btnAddProduk.setForeground(new java.awt.Color(255, 255, 255));
        btnAddProduk.setPreferredSize(new java.awt.Dimension(100, 23));
        ButtonPanel.add(btnAddProduk);

        JSpinner jumlahBeli = new JSpinner();
        jumlahBeli.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jumlahBeli.setPreferredSize(new java.awt.Dimension(45, 22));
        ButtonPanel.add(jumlahBeli);

        panelKetersediaan.add(ButtonPanel, java.awt.BorderLayout.EAST);

        // Tambahkan hover effect
        btnAddProduk.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnAddProduk.setBackground(new Color(255, 255, 255));
                btnAddProduk.setForeground(new Color(253, 82, 8));
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnAddProduk.setBackground(new Color(253, 82, 8));
                btnAddProduk.setForeground(new Color(255, 255, 255));
            }
        });

        btnAddProduk.addActionListener(evt -> {
            if (!produk.isTersedia()) {
                JOptionPane.showMessageDialog(null, "Produk tidak tersedia!");
                jumlahBeli.setValue(0);
                return;
            }
            // Tambahkan produk ke Order
            int i = (int) jumlahBeli.getValue();
            if (produk instanceof Makanan) {
                Makanan makanan = (Makanan) produk;
                addTable(makanan.getNamaMakanan(), i, produk.getHarga());
            } else if (produk instanceof Minuman) {
                Minuman minuman = (Minuman) produk;
                addTable(minuman.getNamaMinuman(), i, produk.getHarga());
            }
            jumlahBeli.setValue(0);
        });

        // Tambahkan panel ketersediaan ke panel utama
        foodCard.add(panelKetersediaan, java.awt.BorderLayout.SOUTH);

        // Tambahkan card ke panel foodCardsPanel
        foodContent.add(foodCard);

        // Refresh panel foodCardsPanel untuk menampilkan perubahan
        foodContent.revalidate();
        foodContent.repaint();
    }

    private void refreshFoodCards() {
        ProdukDB produkDB = new ProdukDB();

        foodContent.removeAll();
        List<Produk> produkList = produkDB.semuaProduk();
        // Memfilter produk menjadi list Makanan dan Minuman
        List<Makanan> makananList = new ArrayList<>();
        List<Minuman> minumanList = new ArrayList<>();
        for (Produk produk : produkList) {
            if (produk instanceof Makanan) {
                makananList.add((Makanan) produk);
            } else if (produk instanceof Minuman) {
                minumanList.add((Minuman) produk);
            }
        }
        // Gunakan makananList dan minumanList sesuai kebutuhan
        for (Makanan makanan : makananList) {
            createFoodCard(makanan);
        }
        for (Minuman minuman : minumanList) {
            createFoodCard(minuman);
        }
    }

    private void tampilGambar(String path, JLabel lblGambar, int labelWidth, int labelHeight) {
        File file = new File(path);

        // Validasi apakah file ada
        if (!file.exists()) {
            lblGambar.setIcon(null);
            lblGambar.setText("Gambar tidak ditemukan");
            return;
        }

        try {
            // Membaca file gambar dari path
            byte[] img = Files.readAllBytes(file.toPath());
            ImageIcon imageIcon = new ImageIcon(img);

            // Dimensi label
            // Menghitung skala gambar agar sesuai dengan label
            int imageWidth = imageIcon.getIconWidth();
            int imageHeight = imageIcon.getIconHeight();

            double scaleX = (double) labelWidth / (double) imageWidth;
            double scaleY = (double) labelHeight / (double) imageHeight;
            double scale = Math.min(scaleX, scaleY);

            // Melakukan scaling pada gambar
            Image scaledImage = imageIcon.getImage().getScaledInstance((int) (scale * imageWidth), (int) (scale * imageHeight), Image.SCALE_SMOOTH);

            // Menampilkan gambar ke label
            lblGambar.setIcon(new ImageIcon(scaledImage));
            lblGambar.setText(""); // Hapus teks jika gambar berhasil ditampilkan
        } catch (IOException ex) {
            ex.printStackTrace();
            lblGambar.setIcon(null);
            lblGambar.setText("Gagal memuat gambar");
        }
    }

    private void addTable(String nama, int qty, double harga) {
        DefaultTableModel dt = (DefaultTableModel) TblOrder.getModel();

        if (qty <= 0) {
            JOptionPane.showMessageDialog(null, "Jumlah harus lebih dari 0!");
            return;
        }

        // Hitung total harga
        double totHarga = harga * qty; // Pastikan qty adalah int atau double

        // Cek apakah produk sudah ada di tabel
        boolean itemDitemukan = false;
        for (int row = 0; row < TblOrder.getRowCount(); row++) {
            String namaDiTabel = TblOrder.getValueAt(row, 0).toString();
            if (nama.equals(namaDiTabel)) {
                int jumlahBaru = qty;

                TblOrder.setValueAt(jumlahBaru, row, 1); // Perbarui jumlah
                TblOrder.setValueAt(totHarga, row, 2); // Perbarui total harga
                itemDitemukan = true;
                break;
            }
        }

        // Jika produk tidak ditemukan, tambahkan baris baru
        if (!itemDitemukan) {
            Vector v = new Vector();
            v.add(nama);
            v.add(qty);
            v.add(totHarga);
            dt.addRow(v);
        }

        hitungHarga();
    }

    private void hitungHarga() {
        // menghitung Sub Harga
        int numOfRow = TblOrder.getRowCount();
        double subTotal = 0.0;
        for (int i = 0; i < numOfRow; i++) {
            double value = Double.valueOf(TblOrder.getValueAt(i, 2).toString());

            subTotal += value;
        }
        DecimalFormat df = new DecimalFormat("00.00");
        lblSubTotal.setText(df.format(subTotal));

        //diskon
        double potonganHarga = 0.0;
        if (subTotal > 100000) {
            potonganHarga = subTotal * 0.1;
        } else {
            potonganHarga = 0;
        }

        double totalHarga = subTotal - potonganHarga;

        lblDiskon.setText(df.format(potonganHarga));
        lblTotal.setText(df.format(totalHarga));
    }

    private void loadOrders(String username, String role) {
        DefaultTableModel dt = (DefaultTableModel) tblMyOrder.getModel();
        dt.setRowCount(0);
        String statusPesanan = jFilterStatus.getSelectedItem().toString();

        OrderDB orderDB = new OrderDB();
        List<Order> orders = orderDB.getOrders(username, role, statusPesanan);

        for (Order order : orders) {
            dt.addRow(new Object[]{
                order.getIdTransaksi(),
                order.getTotalHarga(),
                order.getPotonganHarga(),
                order.getWaktuPembelian(),
                order.getStatusPesanan()
            });
        }
    }

    private void addHoverEffect(JButton button, Color focusTextColor, Icon defaultIcon, Icon focusedIcon) {
        /// Tambahkan listener untuk focus
        button.setIcon(defaultIcon);
        button.setIconTextGap(20);
        button.setHorizontalTextPosition(SwingConstants.RIGHT); // Teks di kanan ikon
        button.setHorizontalAlignment(SwingConstants.LEFT); // Ikon di kiri

        button.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                button.setForeground(focusTextColor); // Ubah warna teks
                button.setBackground(Color.WHITE);
                button.setIcon(focusedIcon); // Ubah ikon
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                button.setForeground(Color.BLACK); // Kembalikan ke warna teks default
                button.setIcon(defaultIcon); // Kembalikan ke ikon default
            }
        });
    }

    // Kelas RoundedPanel untuk memberikan border radius
    static class RoundedPanel extends JPanel {

        private Color backgroundColor;
        private int cornerRadius = 15;

        public RoundedPanel(int radius, Color bgColor) {
            super();
            cornerRadius = radius;
            backgroundColor = bgColor;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Dimension arcs = new Dimension(cornerRadius, cornerRadius);
            int width = getWidth();
            int height = getHeight();
            Graphics2D graphics = (Graphics2D) g;
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // Menentukan warna background jika ada
            if (backgroundColor != null) {
                graphics.setColor(backgroundColor);
            } else {
                graphics.setColor(getBackground());
            }
            graphics.fillRoundRect(0, 0, width - 1, height - 1, arcs.width, arcs.height); // Gambar background
            graphics.setColor(new Color(200, 200, 200));
            graphics.drawRoundRect(0, 0, width - 1, height - 1, arcs.width, arcs.height); // Gambar border
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();
        UIManager.put("TextComponent.arc", 15);
        UIManager.put("Button.arc", 15);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DashboardForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MyOrderPanel;
    private javax.swing.JTable TblOrder;
    private javax.swing.JButton btnAddProduk;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnDetail;
    private javax.swing.JButton btnDetail1;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRefreshOrder;
    private javax.swing.JPanel foodCards;
    private javax.swing.JPanel foodContent;
    private javax.swing.JPanel foodPanel;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JComboBox<String> jFilterStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel lblDiskon;
    private javax.swing.JLabel lblSubTotal;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JScrollPane scrollFood;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JTable tblHistory;
    private javax.swing.JTable tblMyOrder;
    private javax.swing.JLabel txtDeskripsi;
    private javax.swing.JLabel txtHarga;
    private javax.swing.JLabel txtKetersediaan;
    private javax.swing.JLabel txtNama;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
